#if defined( _ACC_ )
#pragma message( "_ACC_" )
#elif defined( __CMB__ )
#pragma message( "__CMB__" )
#elif defined( __CHC__ )
#pragma message( "__CHC__" )
#elif defined( __ACK__ )
#pragma message( "__ACK__" )
#elif defined( __CC_ARM )
#pragma message( "__CC_ARM" )
#elif defined( AZTEC_C ) || defined( __AZTEC_C__ )
#pragma message( "AZTEC_C, __AZTEC_C__" )
#elif defined( __BORLANDC__ )
#pragma message( "__BORLANDC__" )
#elif defined( __CC65__ )
#pragma message( "__CC65__" )
#elif defined( __clang__ )
#pragma message( "__clang__" )
#elif defined( __COMO__ )
#pragma message( "__COMO__" )
#elif defined( __DECC )
#pragma message( "__DECC" )
#elif defined( __convexc__ )
#pragma message( "__convexc__" )
#elif defined( __COMPCERT__ )
#pragma message( "__COMPCERT__" )
#elif defined( __COVERITY__ )
#pragma message( "__COVERITY__" )
#elif defined( _CRAYC )
#pragma message( "_CRAYC" )
#elif defined( __DCC__ )
#pragma message( "__DCC__" )
#elif defined( _DICE )
#pragma message( "_DICE" )
#elif defined( __DMC__ )
#pragma message( "__DMC__" )
#elif defined( __SYSC__ )
#pragma message( "__SYSC__" )
#elif defined( __DJGPP__ ) || defined( __GO32__ )
#pragma message( "__DJGPP__, __GO32__" )
#elif defined( __EDG__ )
#pragma message( "__EDG__" )
#elif defined( __PATHCC__ )
#pragma message( "__PATHCC__" )
#elif defined( __FCC_VERSION )
#pragma message( "__FCC_VERSION" )
#elif defined( __GNUC__ )
#pragma message( "__GNUC__" )
#elif defined( __ghs__ )
#pragma message( "__ghs__" )
#elif defined( __HP_cc )
#pragma message( "__HP_cc" )
#elif defined( __HP_aCC )
#pragma message( "__HP_aCC" )
#elif defined( __IAR_SYSTEMS_ICC__ )
#pragma message( "__IAR_SYSTEMS_ICC__" )
#elif defined( __ibmxl__ )
#pragma message( "__ibmxl__" )
#elif defined( __xlC__ )
#pragma message( "__xlC__" )
#elif defined( __IBMC__ )
#pragma message( "__IBMC__" )
#elif defined( __IBMCPP__ )
#pragma message( "__IBMCPP__" )
#elif defined( __IMAGECRAFT__ )
#pragma message( "__IMAGECRAFT__" )
#elif defined( __INTEL_COMPILER ) || defined( __ICC ) || defined( __ECC ) || defined( __ICL )
#pragma message( "__INTEL_COMPILER, __ICC, __ECC, __ICL" )
#elif defined( __KCC )
#pragma message( "__KCC" )
#elif defined( __CA__ ) || defined( __KEIL__ )
#pragma message( "__CA__, __KEIL__" )
#elif defined( __C166__ )
#pragma message( "__C166__" )
#elif defined( __C51__ ) || defined( __CX51__ )
#pragma message( "__C51__, __CX51__" )
#elif defined( __LCC__ )
#pragma message( "__LCC__" )
#elif defined( __llvm__ )
#pragma message( "__llvm__" )
#elif defined( __LCC__ ) || defined( __MCST__ )
#pragma message( "__LCC__, __MCST__" )
#elif defined( __HIGHC__ )
#pragma message( "__HIGHC__" )
#elif defined( __MWERKS__ ) || defined( __CWCC__ )
#pragma message( "__MWERKS__, __CWCC__" )
#elif defined( _MSC_VER )
#pragma message( "_MSC_VER" )
#elif defined( _MRI )
#pragma message( "_MRI" )
#elif defined( __NDPC__ ) || defined( __NDPX__ )
#pragma message( "__NDPC__, __NDPX__" )
#elif defined( __MINGW32__ ) || defined( __MINGW64__ )
#pragma message( "__MINGW32__, __MINGW64__" )
#elif defined( __sgi ) || defined( sgi )
#pragma message( "__sgi, sgi" )
#elif defined( MIRACLE )
#pragma message( "MIRACLE" )
#elif defined( __MRC__ ) || defined( MPW_C ) || defined( MPW_CPLUS )
#pragma message( "__MRC__, MPW_C, MPW_CPLUS" )
#elif defined( __CC_NORCROFT )
#pragma message( "__CC_NORCROFT" )
#elif defined( __NWCC__ )
#pragma message( "__NWCC__" )
#elif defined( __NVCOMPILER )
#pragma message( "__NVCOMPILER" )
#elif defined( __OPEN64__ ) || defined( __OPENCC__ )
#pragma message( "__OPEN64__, __OPENCC__" )
#elif defined( ORA_PROC )
#pragma message( "ORA_PROC" )
#elif defined( __SUNPRO_C )
#pragma message( "__SUNPRO_C" )
#elif defined( __SUNPRO_CC )
#pragma message( "__SUNPRO_CC" )
#elif defined( __PACIFIC__ )
#pragma message( "__PACIFIC__" )
#elif defined( _PACC_VER )
#pragma message( "_PACC_VER" )
#elif defined( __ORANGEC__ )
#pragma message( "__ORANGEC__" )
#elif defined( __POCC__ )
#pragma message( "__POCC__" )
#elif defined( __PGI )
#pragma message( "__PGI" )
#elif defined( __RENESAS__ ) || defined( __HITACHI__ )
#pragma message( "__RENESAS__, __HITACHI__" )
#elif defined( SASC ) || defined( __SASC ) || defined( __SASC__ )
#pragma message( "SASC, __SASC, __SASC__" )
#elif defined( _SCO_DS )
#pragma message( "_SCO_DS" )
#elif defined( __SDCC ) || defined( SDCC )
#pragma message( "__SDCC, SDCC" )
#elif defined( __SNC__ )
#pragma message( "__SNC__" )
#elif defined( __VOSC__ )
#pragma message( "__VOSC__" )
#elif defined( __SC__ )
#pragma message( "__SC__" )
#elif defined( __TenDRA__ )
#pragma message( "__TenDRA__" )
#elif defined( __TI_COMPILER_VERSION__ ) || defined( _TMS320C6X )
#pragma message( "__TI_COMPILER_VERSION__, _TMS320C6X" )
#elif defined( __TINYC__ )
#pragma message( "__TINYC__" )
#elif defined( __TURBOC__ )
#pragma message( "__TURBOC__" )
#elif defined( _UCC )
#pragma message( "_UCC" )
#elif defined( __USLC__ )
#pragma message( "__USLC__" )
#elif defined( __VBCC__ )
#pragma message( "__VBCC__" )
#elif defined( __WATCOMC__ )
#pragma message( "__WATCOMC__" )
#elif defined( __SCCZ80 ) || defined( SCCZ80 ) || defined( __SDCC )
#pragma message( "__SCCZ80, SCCZ80, __SDCC" )
#elif defined( __ZTC__ )
#pragma message( "__ZTC__" )
#endif

#if defined( __GNUC__ )
#define SFG_ENGINE_ALIGN( num ) __attribute__( ( aligned( ( num ) ) ) )
#elif defined( _MSC_VER )
#define SFG_ENGINE_ALIGN( num ) __declspec( align( ( num ) ) )
#else
#define SFG_ENGINE_ALIGN( num )
#endif
